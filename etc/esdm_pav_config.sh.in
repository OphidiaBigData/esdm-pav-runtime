#
#   ESDM-PAV Runtime
#   Copyright (C) 2020-2021 CMCC Foundation
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#!/bin/bash

if [ "@MULTI_NODE_SUPPORT@" = "yes" ];
then
    usage() { echo "Usage: $0 [-r <RabbitMQ server path - mandatory>] [-u <RabbitMQ username (default=esdmpav)>] [-p <RabbitMQ password (default=esdmpav)>] [-n <Worker thread number (default=10)>] [-w <Max worker number (default=10)>] [-c <CDO bin directory (default=)>]" 1>&2; exit 1; }

    while getopts ":r:u:p:n:w:c:" o; do
        case "${o}" in
            r)
                RABBITMQ_SERVER_PATH=${OPTARG}
                ;;
            u)
                username=${OPTARG}
                ;;
            p)
                pswd=${OPTARG}
                ;;
            n)
                w_thread_number=${OPTARG}
                ;;
            w)
                w_number=${OPTARG}
                ;;
            c)
                cdo_path=${OPTARG}
                ;;
            *)
                usage
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [ -z "${RABBITMQ_SERVER_PATH}" ] ; then
        usage
        exit 0
    fi

    if [ -z "$username" ]
    then
        RABBITMQ_USERNAME=esdmpav
    else
        RABBITMQ_USERNAME=${username}
    fi
    if [ -z "$pswd" ]
    then
        RABBITMQ_PASSWORD=esdmpav
    else
        RABBITMQ_PASSWORD=${pswd}
    fi
    if [ -z "$w_thread_number" ]
    then
        WORKER_THREAD_NUMBER=10
    else
        WORKER_THREAD_NUMBER=${w_thread_number}
    fi
    if [ -z "$w_number" ]
    then
        MAX_WORKERS=10
    else
        MAX_WORKERS=${w_number}
    fi
    if [ -z "$cdo_path" ]
    then
        CDO_PATH=
    else
        CDO_PATH=${cdo_path}
    fi

    CDO_PATH=$CDO_PATH

    sed -i -e "s@RABBITMQ_SERVER_PATH=.*@RABBITMQ_SERVER_PATH=${RABBITMQ_SERVER_PATH}@g" @OPH_SERVER_LOCATION@/sbin/run_esdm_pav.sh
    sed -i -e "s@RABBITMQ_USERNAME=.*@RABBITMQ_USERNAME=${RABBITMQ_USERNAME}@g" @OPH_SERVER_LOCATION@/etc/scheduler.conf
    sed -i -e "s@RABBITMQ_PASSWORD=.*@RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}@g" @OPH_SERVER_LOCATION@/etc/scheduler.conf
    sed -i -e "s@WORKER_THREAD_NUMBER=.*@WORKER_THREAD_NUMBER=${WORKER_THREAD_NUMBER}@g" @OPH_SERVER_LOCATION@/etc/scheduler.conf
    sed -i -e "s@MAX_WORKERS=.*@MAX_WORKERS=${MAX_WORKERS}@g" @OPH_SERVER_LOCATION@/etc/scheduler.conf
    if grep -q "CDO_PATH" @OPH_SERVER_LOCATION@/etc/oph_configuration;
    then
        sed -i -e "s@CDO_PATH=.*@CDO_PATH=${CDO_PATH}@g" @OPH_SERVER_LOCATION@/etc/oph_configuration
    else
        echo "CDO_PATH=${CDO_PATH}" >> @OPH_SERVER_LOCATION@/etc/oph_configuration
    fi

    echo -e "default_vhost = /\ndefault_user = $RABBITMQ_USERNAME\ndefault_pass = $RABBITMQ_PASSWORD\ndefault_user_tags.administrator = true\ndefault_permissions.configure = .\ndefault_permissions.read = .\ndefault_permissions.write = .*" > ${RABBITMQ_SERVER_PATH}/etc/rabbitmq/rabbitmq.conf

    echo -e "\nRabbitMQ credential have been generated in $RABBITMQ_SERVER_PATH/etc/rabbitmq/rabbitmq.conf"
    echo -e "\nSet\n\tRABBITMQ_SERVER_PATH=$RABBITMQ_SERVER_PATH\n\tRABBITMQ_USERNAME=$RABBITMQ_USERNAME\n\tRABBITMQ_PASSWORD=$RABBITMQ_PASSWORD\n\tWORKER_THREAD_NUMBER=$WORKER_THREAD_NUMBER\n\tMAX_WORKERS=$MAX_WORKERS\n\tCDO_PATH=$CDO_PATH\n"
fi

openssl req -newkey rsa:1024 \
    -passout pass:abcd \
    -subj "/" -sha1 \
    -keyout @OPH_SERVER_LOCATION@/etc/cert/rootkey.pem \
    -out @OPH_SERVER_LOCATION@/etc/cert/rootreq.pem
openssl x509 -req -in @OPH_SERVER_LOCATION@/etc/cert/rootreq.pem \
    -passin pass:abcd \
    -sha1 -extensions v3_ca \
    -signkey @OPH_SERVER_LOCATION@/etc/cert/rootkey.pem \
    -out @OPH_SERVER_LOCATION@/etc/cert/rootcert.pem
cat @OPH_SERVER_LOCATION@/etc/cert/rootcert.pem @OPH_SERVER_LOCATION@/etc/cert/rootkey.pem > @OPH_SERVER_LOCATION@/etc/cert/cacert.pem

openssl req -newkey rsa:1024 \
    -passout pass:abcd \
    -subj "/" -sha1 \
    -keyout @OPH_SERVER_LOCATION@/etc/cert/serverkey.pem \
    -out @OPH_SERVER_LOCATION@/etc/cert/serverreq.pem
openssl x509 -req \
    -in @OPH_SERVER_LOCATION@/etc/cert/serverreq.pem \
    -passin pass:abcd \
    -sha1 -extensions usr_cert \
    -CA @OPH_SERVER_LOCATION@/etc/cert/cacert.pem  \
    -CAkey @OPH_SERVER_LOCATION@/etc/cert/cacert.pem \
    -CAcreateserial \
    -out @OPH_SERVER_LOCATION@/etc/cert/servercert.pem
cat @OPH_SERVER_LOCATION@/etc/cert/servercert.pem @OPH_SERVER_LOCATION@/etc/cert/serverkey.pem @OPH_SERVER_LOCATION@/etc/cert/rootcert.pem > @OPH_SERVER_LOCATION@/etc/cert/myserver.pem

echo -e "\nCert certificates have been generated in @OPH_SERVER_LOCATION@/etc/cert"

exit 0
